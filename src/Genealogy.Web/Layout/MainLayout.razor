@using System.Security.Claims
@using System.Security.Principal
@using Genealogy.Web.Models
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (_hasRunInit)
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudToolBar>
                <MudText Typo="Typo.h6" HtmlTag="h1">Genealogy</MudText>
            </MudToolBar>
            <MudSpacer/>
            <CascadingAuthenticationState>
                <Profile/>
            </CascadingAuthenticationState>
        </MudAppBar>
        <MudDrawer Open="true" ClipMode="DrawerClipMode.Always" Elevation="2">
            <MudDrawerHeader>
                <MudText Typo="Typo.h5" Class="mt-1">Application</MudText>
            </MudDrawerHeader>
        </MudDrawer>
        <MudMainContent>
            <CascadingValue Value="@_userInfo">
                @Body
            </CascadingValue>
        </MudMainContent>
    </MudLayout>

    @* Required *@
    <MudThemeProvider/>
    <MudPopoverProvider/>

    @* Needed for dialogs *@
    @* <MudDialogProvider /> *@

    @* Needed for snackbars *@
    @* <MudSnackbarProvider /> *@
}
else
{
    <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
    </MudOverlay>
}


@code {
    private bool _hasRunInit;
    private GlobalUserInfo? _userInfo;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // If the user is authenticated and reloads the page in the browser, the event won't trigger so we can do the initial load here.
        ClaimsPrincipal user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        _hasRunInit = true;

        if (user.Identity is { IsAuthenticated: true })
        {
            SetIdentity(user.Identity);
        }
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        try
        {
            ClaimsPrincipal user = (await task).User;

            if (user.Identity is not { IsAuthenticated: true })
            {
                return;
            }

            SetIdentity(user.Identity);
        }
        catch (Exception)
        {
            // 
        }
    }

    private void SetIdentity(IIdentity identity)
    {
        _userInfo = new GlobalUserInfo
        {
            Name = identity.Name,
            AuthenticationType = identity.AuthenticationType
        };
    }

}
